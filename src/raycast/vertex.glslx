precision mediump float;

uniform vec2 u_pov;
uniform float u_lookAngle;

// (map columns, map rows) * cellSize
uniform vec2 u_mapSize;

// cell size * projection distance / canvas height
uniform float u_wallScale;

uniform float u_halfFov;

uniform sampler2D u_map;

attribute vec2 a_position;

varying vec4 v_color;

const float STEP_SIZE = 1.0;
const int MAX_DISTANCE = 1000;

void main() {
  gl_Position = vec4(a_position, 0.0, 1.0);

  float rayAngle = u_lookAngle + a_position.x * u_halfFov;

  vec2 step = vec2(cos(rayAngle), sin(rayAngle)) * STEP_SIZE;
  vec2 pos = u_pov + step;

  for (int i = 0; i < MAX_DISTANCE; i++) {
    vec4 color = texture2D(u_map, pos / u_mapSize);
    if (color.r > 0.5) {
      float distance =
        sin(u_lookAngle) * (pos.y - u_pov.y) +
        cos(u_lookAngle) * (pos.x - u_pov.x);
      float height = u_wallScale / distance;
      vec2 newPosition = vec2(a_position.x, height * 0.5 * sign(a_position.y));
      gl_Position = vec4(newPosition, 0.0, 1.0);
      v_color = color;
      return;
    }
    pos += step;
  }
}
