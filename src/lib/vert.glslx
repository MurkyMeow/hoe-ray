precision mediump float;

uniform vec2 u_playerPos;
uniform float u_playerAngle;

uniform vec2 u_mapSize;
uniform vec2 u_screenSize;
uniform float u_cellSize;

uniform float u_projectionDistance;

uniform sampler2D u_map;

attribute vec2 a_position;

varying vec4 v_color;

const float PI = 3.14159265359;

const float STEP_SIZE = 1.0;
const int MAX_DISTANCE = 200;

void main() {
  v_color = vec4(vec3(0.149, 0.141, 0.912), 1);
  gl_Position = vec4(a_position, 0.0, 1.0);

  // float offset = (a_position.x + 2.0) / 2.0 * u_screenSize.x;
  // float rayAngle = u_playerAngle + atan(offset / u_projectionDistance);

  float rayAngle = u_playerAngle + a_position.x * (PI / 6.0);

  vec2 dir = vec2(cos(rayAngle), sin(rayAngle));
  vec2 step = dir * STEP_SIZE;
  vec2 pos = u_playerPos + step;

  for (int i = 0; i < MAX_DISTANCE; i++) {
    vec2 texPos = pos / u_cellSize / u_mapSize;
    vec4 color = texture2D(u_map, texPos);
    if (color.r > 0.5) {
      float distance = dir.y * (pos.y - u_playerPos.y) + dir.x * (pos.x - u_playerPos.x);
      float height = u_cellSize / distance * u_projectionDistance;
      gl_Position = vec4(a_position.x, height * 0.5 * 0.002 * sign(a_position.y), 0.0, 1.0);
      v_color = vec4(color.rgb / distance * 50.0, 1);
      return;
    }
    pos += step;
  }
}
