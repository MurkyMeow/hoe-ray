precision mediump float;

uniform vec2 u_pov;
uniform float u_lookAngle;
uniform vec2 u_mapSize; // (map columns, map rows)
uniform float u_wallScale; // projection distance / canvas height
uniform float u_halfFov;
uniform sampler2D u_map;

attribute vec4 a_position;

varying vec2 v_texPosition;

const int MAX_DISTANCE = 1000;

void main() {
  gl_Position = a_position;

  float rayAngle = u_lookAngle + a_position.x * u_halfFov;

  vec2 rayDir = vec2(cos(rayAngle), sin(rayAngle));

  vec2 mapPos = floor(u_pov);
  vec2 mapStep = vec2(rayDir.x < 0.0 ? -1 : 1, rayDir.y < 0.0 ? -1 : 1);

  vec2 sideStep = abs(1.0 / rayDir);
  vec2 sideDist = mapStep * (mapPos + mapStep * 0.5 + 0.5 - u_pov) * sideStep;

  for (int i = 0; i < MAX_DISTANCE; i++) {
    vec2 side = sideDist.x > sideDist.y ? vec2(0, 1) : vec2(1, 0);

    mapPos += mapStep * side;
    sideDist += sideStep * side;

    vec4 color = texture2D(u_map, mapPos / u_mapSize);

    if (color.r > 0.5) {
      float hitDist = length((mapPos - u_pov + 0.5 - mapStep * 0.5) / rayDir * side);
      float hitX = fract(length((u_pov + hitDist * rayDir) * side.yx));
      float lineHeight = u_wallScale / hitDist;

      gl_Position.y = lineHeight * 0.5 * sign(a_position.y);
      v_texPosition = vec2(hitX, 0.5 - a_position.y * 0.5);

      break;
    }
  }
}
