precision mediump float;

uniform vec2 pov;
uniform vec2 lookdir;
uniform vec2 map_size; // (map columns, map rows)

uniform float wall_scale; // projection distance / canvas height

uniform sampler2D map;

attribute vec4 vert_pos;

varying vec2 tex_pos;

const int MAX_DISTANCE = 1000;

void main() {
  gl_Position = vert_pos;

  float cam_x = vert_pos.x;

  vec2 ray_dir = vec2(lookdir.x - lookdir.y * cam_x, lookdir.y + lookdir.x * cam_x);

  vec2 map_pos = floor(pov);
  vec2 map_step = sign(ray_dir);

  vec2 side_step = abs(1.0 / ray_dir);
  vec2 side_dist = map_step * (map_pos + map_step * 0.5 + 0.5 - pov) * side_step;

  for (int i = 0; i < MAX_DISTANCE; i++) {
    vec2 side = side_dist.x > side_dist.y ? vec2(0, 1) : vec2(1, 0);

    map_pos += map_step * side;
    side_dist += side_step * side;

    vec4 color = texture2D(map, map_pos / map_size);

    if (color.r > 0.5) {
      float hitDist = length((map_pos - pov + 0.5 - map_step * 0.5) / ray_dir * side);
      float hitX = fract(length((pov + hitDist * ray_dir) * side.yx));
      float lineHeight = wall_scale / hitDist;

      gl_Position.y = lineHeight * 0.5 * sign(vert_pos.y);
      tex_pos = vec2(hitX, 0.5 - vert_pos.y * 0.5);

      break;
    }
  }
}
